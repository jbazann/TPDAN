package com.jbazann.customers.customer;

import com.google.common.collect.ComputationException;
import com.jbazann.customers.commons.exceptions.DistributedTransactionException;
import com.jbazann.customers.customer.dto.EditableFieldsDTO;
import com.jbazann.customers.customer.exceptions.InvalidCustomerException;
import com.jbazann.customers.user.User;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CompletableFuture;


@Service
public class CustomerService {

    private final CustomerRepository customerRepository;
    private final CustomerSiteService customerSiteService;
    private final CustomerUserService customerUserService;
    private final CustomerCallerService customerCallerService;

    @Autowired
    public CustomerService(CustomerRepository customerRepository, CustomerSiteService customerSiteService, CustomerUserService customerUserService, CustomerCallerService customerCallerService) {
        this.customerRepository = customerRepository;
        this.customerSiteService = customerSiteService;
        this.customerUserService = customerUserService;
        this.customerCallerService = customerCallerService;
    }

    /**
     * Customer ID provider. Values generated by this method should be
     * expected to be unique and valid for registering new Customer instances.
     * @return a unique customer entity identifier.
     */
    public UUID generateCustomerId() {
        return UUID.randomUUID(); // TODO replace with safe alternative
    }

    /**
     * Persist a new valid customer on the database.
     * @param customer a customer with an ID that is not already used.
     * @return the persisted instance.
     */
    public Customer newCustomer(@Valid @NotNull Customer customer) {
        if (customerRepository.existsById(customer.id())) {
            throw new InvalidCustomerException("Customer with id " + customer.id() + " already exists.");
        }
        return customerRepository.save(customer);
    }

    /**
     * If the resulting instance from using the passed {@link EditableFieldsDTO}'s non-null fields
     * in place for the corresponding fields in the {@link Customer} with matching {@code customerId} is valid, overwrite the current
     * instance with the new one.
     * @param customerId a vaild customer ID.
     * @param fields an instance with any or all fields containing non-null values. If all fields are null
     *               no changes will be made, but all the database operations will be performed as if they were.
     */
    public void updateCustomer(@NotNull UUID customerId, @NotNull EditableFieldsDTO fields) {
        final @NotNull Customer customer = fetchCustomer(customerId);
        fields.update(customer);
        customerRepository.save(customer);
    }

    /**
     * Find a list of up to 5 customers matching the provided example.
     * This was made this way for simplicity's sake, only intended for queries
     * expected to match with a single customer.
     * @param customer an example customer with null fields, except for those intended to be matched against.
     * @return a size-limited list of matching results.
     */
    public List<Customer> findCustomersByExample(@NotNull Customer customer) {
        return customerRepository.findAll(Example.of(customer), Pageable.ofSize(5)).toList();
    }

    /**
     * Add allowed user if it's not already present. No user ID validation will be performed (so
     * invalid references may exist)
     * @param customerId a valid customer ID.
     * @param userId a user ID that is presumed, but not required to be valid.
     */
    @Transactional
    public void addAllowedUser(@NotNull UUID customerId, @NotNull UUID userId) {
        // trigger distributed transaction
        CompletableFuture<User> externalTransaction = CompletableFuture.supplyAsync(
                () -> customerCallerService.addAllowedUser(customerId, userId)
        );
        // perform local operations
        @NotNull final Customer customer = fetchCustomer(customerId);
        customerUserService.addAllowedUser(customer, userId);
        // await successful completion before returning
        try{
            externalTransaction.join();
        }catch (CancellationException | ComputationException e) {
            throw new DistributedTransactionException("User service failed.",e);
        }
    }

    /**
     * Refer to {@link CustomerSiteService#activateSite(Customer, UUID)}.
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     * @return whether the site was registered as active by the customer instance.
     */
    @Transactional
    public boolean activateSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        @NotNull final Customer customer = fetchCustomer(customerId);
        final boolean activated = customerSiteService.activateSite(customer, siteId);
        customerRepository.save(customer);
        return activated;
    }

    /**
     * Same as {@link CustomerService#activateSite(UUID, UUID)}, but assumes
     * the site was previously registered as pending for the given customer, so it updates
     * the counter accordingly.
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     */
    @Transactional
    public void activatePendingSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        @NotNull final Customer customer = fetchCustomer(customerId);
        customerSiteService.activatePendingSite(customer, siteId);
        customerRepository.save(customer);
    }

    /**
     * Remove the given site from {@link Customer#activeSites()}.
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     */
    @Transactional
    public void finishSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        @NotNull final Customer customer = fetchCustomer(customerId);
        customerSiteService.finishSite(customer, siteId);
        customerRepository.save(customer);
    }

    /**
     * Add one to {@link Customer#pendingSites()}
     * @param customerId a valid customer ID.
     */
    public void addPendingSite(@NotNull UUID customerId) {
        final @NotNull Customer customer = fetchCustomer(customerId);
        customerRepository.save(customer.countPendingSite());
    }

    /**
     * Like {@link CustomerService#finishSite(UUID, UUID)}, remove the given site from
     * {@link Customer#activeSites()}, but also increment {@link Customer#pendingSites()}.
     * @param customerId a valid customer ID.
     * @param siteId a site ID that is presumed, but not required to be valid.
     */
    public void deactivateSite(@NotNull UUID customerId, @NotNull UUID siteId) {
        final @NotNull Customer customer = fetchCustomer(customerId);
        customerSiteService.deactivateSite(customer, siteId);
        customerRepository.save(customer);
    }

    private Customer fetchCustomer(@NotNull UUID customerId) {
        return customerRepository.findById(customerId).orElseThrow(
                () -> new InvalidCustomerException("Customer "+ customerId +" not found.")
        );
    }

}
